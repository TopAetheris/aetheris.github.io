去官网下载并安装 Node.js.
Node.js 和 npm：Node.js 提供了 JavaScript 运行环境，而 npm 是 Node.js 的包管理器。

安装后，打开 命令提示符 或 PowerShell，运行以下命令检查是否安装成功：
node -v
npm -v
表示你的机器已经具备了 Node.js 环境，可以运行 JavaScript 代码、安装和管理依赖包。

GitHub Desktop 和 Node.js 为你提供了开发环境，但 npm 需要通过 install 来为每个项目安装依赖包，才能正常打包和使用相关的功能。
示例：npm install webpack 会把 webpack 安装到当前项目的 node_modules 文件夹中。安装后的包会被记录在项目根目录下的 package.json 中。

首先cd到你的项目文件位置.windows下右键打开终端
E:\topaetheris.github.io
npm init -y

打开 package.json 文件： 在 E:\topaetheris.github.io 目录下，创建或修改一个 package.json 文件。

{
  "name": "topaetheris.github.io",
  "version": "1.0.0",
  "description": "Your website description",
  "main": "index.js",
  "scripts": {
    "start": "webpack serve --mode development --open",
    "build": "webpack --mode production"
  },
  "devDependencies": {
    "webpack": "^5.0.0",
    "webpack-cli": "^4.0.0",
    "webpack-dev-server": "^4.0.0",
    "html-webpack-plugin": "^5.0.0",
    "style-loader": "^3.0.0",
    "css-loader": "^6.0.0",
    "file-loader": "^6.0.0"
  }
}

在你的E:\topaetheris.github.io\下创建src文件夹,创建index.js

// src/index.js
import '../css/styles.css';  // 从 css 文件夹引入 styles.css

// 你的现有 JavaScript 代码
console.log("Welcome to TopAetheris!");
document.getElementById('app').innerHTML = "Hello from TopAetheris!";

创建webpack.config.js 构建styles.css 和 index.html 文件。
const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');

module.exports = {
  entry: './src/index.js', // 入口文件
  output: {
    filename: '[name].[contenthash].js', // 生成带有哈希值的输出文件名
    path: path.resolve(__dirname, 'dist'), // 输出文件夹
  },
  module: {
    rules: [
      {
        test: /\.css$/, // 处理 CSS 文件
        use: ['style-loader', 'css-loader'], // 使用 style-loader 和 css-loader
      },
      {
        test: /\.(jpg|png|gif|svg)$/, // 处理图片文件
        use: ['file-loader'],
      },
    ],
  },
  plugins: [
    new HtmlWebpackPlugin({
      template: './index.html', // 使用你的 HTML 模板文件
    }),
  ],
  mode: 'production', // 设置为生产模式
};

在你的E:\topaetheris.github.io\下npm运行安装命令安装所有依赖项，包括 Webpack 等。
npm install

以后更新站点只需要打包,然后再通过 GitHub Desktop 推送到你的 GitHub 仓库，就可以更新网站缓存
运行构建命令
npx webpack --mode production

